// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tagsFieldNames          = builder.RawFieldNames(&Tags{})
	tagsRows                = strings.Join(tagsFieldNames, ",")
	tagsRowsExpectAutoSet   = strings.Join(stringx.Remove(tagsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tagsRowsWithPlaceHolder = strings.Join(stringx.Remove(tagsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tagsModel interface {
		Insert(ctx context.Context, data *Tags) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Tags, error)
		FindOneByTagId(ctx context.Context, tagId int64) (*Tags, error)
		Update(ctx context.Context, data *Tags) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTagsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Tags struct {
		Id     int64  `db:"id"`
		TagId  int64  `db:"tag_id"` // tag ID
		Name   string `db:"name"`
		UserId int64  `db:"user_id"`
	}
)

func newTagsModel(conn sqlx.SqlConn) *defaultTagsModel {
	return &defaultTagsModel{
		conn:  conn,
		table: "`tags`",
	}
}

func (m *defaultTagsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTagsModel) FindOne(ctx context.Context, id int64) (*Tags, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tagsRows, m.table)
	var resp Tags
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTagsModel) FindOneByTagId(ctx context.Context, tagId int64) (*Tags, error) {
	var resp Tags
	query := fmt.Sprintf("select %s from %s where `tag_id` = ? limit 1", tagsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, tagId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTagsModel) Insert(ctx context.Context, data *Tags) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, tagsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.TagId, data.Name, data.UserId)
	return ret, err
}

func (m *defaultTagsModel) Update(ctx context.Context, newData *Tags) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tagsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.TagId, newData.Name, newData.UserId, newData.Id)
	return err
}

func (m *defaultTagsModel) tableName() string {
	return m.table
}
