// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	todosFieldNames          = builder.RawFieldNames(&Todos{})
	todosRows                = strings.Join(todosFieldNames, ",")
	todosRowsExpectAutoSet   = strings.Join(stringx.Remove(todosFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	todosRowsWithPlaceHolder = strings.Join(stringx.Remove(todosFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	todosModel interface {
		Insert(ctx context.Context, data *Todos) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Todos, error)
		FindOneByTodoId(ctx context.Context, todoId int64) (*Todos, error)
		Update(ctx context.Context, data *Todos) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTodosModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Todos struct {
		Id          int64          `db:"id"`
		TodoId      int64          `db:"todo_id"` // todo ID
		UserId      int64          `db:"user_id"`
		Name        string         `db:"name"`
		Description sql.NullString `db:"description"`
		Status      string         `db:"status"`
		Priority    string         `db:"priority"`
		DueDate     time.Time      `db:"due_date"`
		CreatedAt   time.Time      `db:"created_at"`
		UpdatedAt   time.Time      `db:"updated_at"`
		IsDeleted   int64          `db:"is_deleted"` // is deleted
	}
)

func newTodosModel(conn sqlx.SqlConn) *defaultTodosModel {
	return &defaultTodosModel{
		conn:  conn,
		table: "`todos`",
	}
}

func (m *defaultTodosModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTodosModel) FindOne(ctx context.Context, id int64) (*Todos, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", todosRows, m.table)
	var resp Todos
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTodosModel) FindOneByTodoId(ctx context.Context, todoId int64) (*Todos, error) {
	var resp Todos
	query := fmt.Sprintf("select %s from %s where `todo_id` = ? limit 1", todosRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, todoId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTodosModel) Insert(ctx context.Context, data *Todos) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, todosRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.TodoId, data.UserId, data.Name, data.Description, data.Status, data.Priority, data.DueDate, data.IsDeleted)
	return ret, err
}

func (m *defaultTodosModel) Update(ctx context.Context, newData *Todos) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, todosRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.TodoId, newData.UserId, newData.Name, newData.Description, newData.Status, newData.Priority, newData.DueDate, newData.IsDeleted, newData.Id)
	return err
}

func (m *defaultTodosModel) tableName() string {
	return m.table
}
