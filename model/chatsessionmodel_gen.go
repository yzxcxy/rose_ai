// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatSessionFieldNames          = builder.RawFieldNames(&ChatSession{})
	chatSessionRows                = strings.Join(chatSessionFieldNames, ",")
	chatSessionRowsExpectAutoSet   = strings.Join(stringx.Remove(chatSessionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chatSessionRowsWithPlaceHolder = strings.Join(stringx.Remove(chatSessionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	chatSessionModel interface {
		Insert(ctx context.Context, data *ChatSession) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ChatSession, error)
		FindOneBySessionId(ctx context.Context, sessionId int64) (*ChatSession, error)
		Update(ctx context.Context, data *ChatSession) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChatSessionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ChatSession struct {
		Id        int64     `db:"id"`
		SessionId int64     `db:"session_id"` // session ID
		UserId    int64     `db:"user_id"`    // 用户ID
		Title     string    `db:"title"`
		IsDeleted int64     `db:"is_deleted"` // is deleted
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newChatSessionModel(conn sqlx.SqlConn) *defaultChatSessionModel {
	return &defaultChatSessionModel{
		conn:  conn,
		table: "`chat_session`",
	}
}

func (m *defaultChatSessionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultChatSessionModel) FindOne(ctx context.Context, id int64) (*ChatSession, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatSessionRows, m.table)
	var resp ChatSession
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatSessionModel) FindOneBySessionId(ctx context.Context, sessionId int64) (*ChatSession, error) {
	var resp ChatSession
	query := fmt.Sprintf("select %s from %s where `session_id` = ? limit 1", chatSessionRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, sessionId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatSessionModel) Insert(ctx context.Context, data *ChatSession) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, chatSessionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SessionId, data.UserId, data.Title, data.IsDeleted)
	return ret, err
}

func (m *defaultChatSessionModel) Update(ctx context.Context, newData *ChatSession) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chatSessionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.SessionId, newData.UserId, newData.Title, newData.IsDeleted, newData.Id)
	return err
}

func (m *defaultChatSessionModel) tableName() string {
	return m.table
}
