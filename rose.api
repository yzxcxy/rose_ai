syntax = "v2"

info (
	author: "yzxcxy"
	desc:   "rose AI agent"
)

type LoginRequest {
	username string `json:"username" validate:"required,min=3,max=20"`
	password string `json:"password" validate:"required,min=6,max=20"`
}

type LoginResponse {
	token  string `json:"token"`
	userId int64  `json:"userId"`
}

type RegisterRequest {
	username string `json:"username" validate:"required,min=3,max=20"`
	password string `json:"password" validate:"required,min=6,max=20"`
}

type RegisterResponse {
	userName string `json:"username"`
	userId   int64  `json:"userId"`
}

// RAG上传请求
type RagUploadRequest {}

// RAG上传响应
type RagUploadResponse {
	message string `json:"message"`
}

// 问答请求
type QaRequest {
	SessionID string `json:"session_id"`
	Input     string `json:"input"`
}

type Memory {
	History []Message `json:"history"`
}

type Message {
	Role    string `json:"role"`
	Content string `json:"content"`
}

// 问答响应
type QaResponse {
	SessionID string `json:"session_id"`
	Output    string `json:"output"`
}

type Todo {
	TodoId      int64  `json:"todoId"`
	UserId      int64  `json:"userId"`
	UserName    string `json:"userName"`
	Name        string `json:"name"`
	Description string `json:"description"`
	Status      string `json:"status"`
	Priority    string `json:"priority"`
	DueDate     string `json:"dueDate"`
	CreatedAt   string `json:"createdAt"`
	UpdatedAt   string `json:"updatedAt"`
}

type CreateTodoReq {
	Name        string `json:"name" validate:"required" validate:"min=3,max=100"`
	Description string `json:"description" validate:"omitempty,max=500"`
	Status      string `json:"status" validate:"omitempty,oneof=pending in_progress completed"`
	Priority    string `json:"priority" validate:"omitempty,oneof=low medium high"`
	DueDate     string `json:"dueDate"`
}

type CreateTodoResp {
	TodoId int64 `json:"todoId"`
}

type GetTodoReq {
	TodoId int64 `path:"todoId"`
}

type ListTodoReq {
	Page       int64    `json:"page,default=1"`
	PageSize   int64    `json:"pageSize,default=10"`
	Status     []string `josn:"status,optional"`
	Priority   []string `josn:"priority,optional"`
	MinDueDate string   `json:"minDueDate,optional"` // 用于筛选最小截止日期
	MaxDueDate string   `json:"maxDueDate,optional"`
	Search     string   `json:"search,optional"` // 用于模糊搜索名称或描述
	SortBy     []string `json:"sortBy,optional"` // 用于排序，例如 "createdAt" 或 "dueDate"
	SortOrder  []string `json:"sortOrder,optional"` // 用于排序顺序，例如 "asc" 或 "desc"
	StartDate  string   `json:"startDate,optional"` // 用于筛选开始日期
	EndDate    string   `json:"endDate,optional"` // 用于筛选结束日期
}

type ListTodoResp {
	List  []Todo `json:"list"`
	Total int64  `json:"total"`
}

type UpdateTodoReq {
	TodoId      int64  `path:"todoId"`
	Name        string `json:"name" validate:"omitempty,min=3,max=100"`
	Description string `json:"description,optional" validate:"omitempty,max=500"`
	Status      string `json:"status,optional" validate:"omitempty,oneof=pending in_progress completed"`
	Priority    string `json:"priority,optional" validate:"omitempty,oneof=low medium high"`
	DueDate     string `json:"dueDate,optional"`
}

type UpdateTodoResp {}

type DeleteTodoReq {
	TodoId int64 `path:"todoId"`
}

type RagVectorizationRequest {
	fileName []string `json:"fileName"`
}

type RagVectorizationResponse {
	ids []string `json:"ids"`
}

type ChatCreateRequest {
	title string `json:"title"`
}

type ChatCreateResponse {
	sessionId string `json:"sessionId"`
}

type ChatDeleteRequest {
	sessionId string `path:"sessionId"`
}

type ChatDeleteResponse {}

type ChatUpdateRequest {
	sessionId string `path:"sessionId"`
	title     string `json:"title"`
}

type ChatUpdateResponse {}

type ChatQueryRequest {
	sessionId string `path:"sessionId"`
}

type ChatQueryReponse {
	sessionId string    `josn:"sessionId"`
	title     string    `json:"title"`
	History   []Message `json:"history"`
}

type ChatQueryUserListRequest {
	userId int64 `json:"userId"`
}

type ChatSession {
	sessionId string `josn:"sessionId"`
	title     string `json:"title"`
}

type ChatQueryUserListResponse {
	userId   int64         `json:"userId"`
	chatList []ChatSession `json:"list"`
}

service rose-api {
	@handler loginHandler
	post /login (LoginRequest) returns (LoginResponse)

	@handler registerHandler
	post /register (RegisterRequest) returns (RegisterResponse)
}

@server (
	jwt: Auth
)
service rose-api {
	@handler ragUploadHandler
	post /rag/upload (RagUploadRequest) returns (RagUploadResponse)

	@handler ragVectorization
	post /rag/vectorization (RagVectorizationRequest) returns (RagVectorizationResponse)

	@handler qaHandler
	post /qa (QaRequest) returns (QaResponse)

	// 创建
	@handler createTodo
	post /todos (CreateTodoReq) returns (CreateTodoResp)

	// 查询单个
	@handler getTodo
	get /todos/:todoId (GetTodoReq) returns (Todo)

	// 分页列表
	@handler listTodos
	post /todoList (ListTodoReq) returns (ListTodoResp)

	// 更新
	@handler updateTodo
	put /todos/:todoId (UpdateTodoReq) returns (UpdateTodoResp)

	// 删除
	@handler deleteTodo
	delete /todos/:todoId (DeleteTodoReq)

	// 创建聊天会话
	@handler createChat
	post /chat (ChatCreateRequest) returns (ChatCreateResponse)

	// 删除聊天会话
	@handler deleteChat
	delete /chat/:sessionId (ChatDeleteRequest) returns (ChatDeleteResponse)

	// 更新聊天会话
	@handler updateChat
	put /chat/:sessionId (ChatUpdateRequest) returns (ChatUpdateResponse)

	// 查询某个聊天
	@handler queryChat
	get /chat/:sessionId (ChatQueryRequest) returns (ChatQueryReponse)

	@handler queryChatList
	get /chat/userChatList (ChatQueryUserListRequest) returns (ChatQueryUserListResponse)
}

